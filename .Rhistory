(my_data[["antennae"]]>=1.1 & my_data[["antennae"]]<1.3 )*3 +
(my_data[["antennae"]]>=1.3 & my_data[["antennae"]]<1.4 )*4 +
(my_data[["antennae"]]>=1.4)*5)
# - Performance on test set
confusionMatrix(my_cart0_pred,my_data[[current_response_var]], positive = "M")
antennae_new <- as.factor((my_data[["antennae"]]<0.82)*1 +
(my_data[["antennae"]]>=0.82 & my_data[["antennae"]]<1.1 )*2 +
(my_data[["antennae"]]>=1.1 & my_data[["antennae"]]<1.3 )*3 +
(my_data[["antennae"]]>=1.3 & my_data[["antennae"]]<1.4 )*4 +
(my_data[["antennae"]]>=1.4)*5)
my_data[["antennae_new"]] <- antennae_new
my_formula1 <- as.formula(paste0(current_response_var,
"~  antennae_new + body"))#
my_formula1
my_formula1 <- as.formula(paste0(current_response_var,
"~  antennae_new + body"))#
my_cart1 <- caret::train(my_formula1, my_data, method = "rpart",model=TRUE,
trControl = trainControl(
method = "cv", number = 10, verboseIter = TRUE),
tuneGrid=expand.grid(cp=0.01)
)
# - Plot the tree
rpart.plot(my_cart1$finalModel)
# - Plot the tree
rpart.plot(my_cart1$finalModel)
my_formula2 <- as.formula(paste0(current_response_var,
"~  antennae_new + body "))#
my_formula2
my_model2 <- glm(my_formula2, data = my_data, family = binomial())
my_model2_summary <- summary(my_model2)
my_model2_summary$coefficients
my_model0_summary$coefficients
my_formula <- as.formula(paste0(current_response_var,
"~ body_norm + antennae_norm"))# + treatment*antennae + treatment*body"))# + body*antennae"))
# --- Model 0
my_model0 <- glm(my_formula, data = my_data, family = binomial())
my_model0_summary <- summary(my_model0)
my_model0_summary$coefficients
my_model0_summary$coefficients
my_model2_summary$coefficients
# ----------------------------------------------------------
# -------------       DATA SETS       ----------------------
# ----------------------------------------------------------
rm(list = ls())
# --- libraries
library(data.table)
library(caret)
library(ggplot2)
# --- read datasets with fread function
my_data <- fread("case01/data/isopods.csv", sep = ";", dec = ",") # Yvar: Mating (binary)
current_response_var <- "Mating"
# --- preliminar data treatment
sapply(my_data, class)
sapply(my_data, function(x) sum(is.na(x)))
my_data <- na.omit(copy(my_data))
my_data[[current_response_var]] <- as.factor(my_data[[current_response_var]])
my_data[[current_response_var]] <- relevel(my_data[[current_response_var]], "U")
my_data[["treatment"]] <- as.character(my_data[["treatment"]])
my_data[["replica"]] <- as.character(my_data[["replica"]])
my_data[["body_norm"]] <- (my_data[["body"]] - mean(my_data[["body"]]))/sd(my_data[["body"]])
my_data[["antennae_norm"]] <- (my_data[["antennae"]] - mean(my_data[["antennae"]]))/sd(my_data[["antennae"]])
# --- descriptive statistics
ggplot(my_data, aes(x = antennae, group = Mating, fill = Mating))+
geom_density(alpha = 0.4)
ggplot(my_data, aes(x = body, group = Mating, fill = Mating))+
geom_density(alpha = 0.4)
table(my_data[[current_response_var]], my_data[["replica"]])
table(my_data[[current_response_var]], my_data[["treatment"]])
# -----------------------------------------------------------------------
# -------------       SIGNIFICANCE TESTS      ----------------------
# -----------------------------------------------------------------------
rm(list = ls())
# --- Libraries ---
library(data.table)
library(caret)
library(ggplot2)
# --- Read data sets ---
source("case01/case01_01_read_data.R")
my_formula <- as.formula(paste0(current_response_var,
"~ body_norm + antennae_norm"))
my_model0 <- glm(my_formula, data = my_data, family = binomial())
my_model0_summary <- summary(my_model0)
my_model0_summary$coefficients
my_fitted0_numerical <- 1/(1+exp(-predict(my_model0)))
plot(my_fitted0_numerical, my_data[[current_response_var]])
threshold <- 0.38
my_fitted0 <- as.factor(ifelse((1/(1+exp(-predict(my_model0))))>threshold, "M_fitted", "U_fitted"))
my_fitted0 <- relevel(my_fitted0, "U_fitted")
table(my_fitted0, my_data[[current_response_var]])
my_data0 <- copy(my_data)
my_data0[["fitted"]] <- my_fitted0
ggplot(my_data0, aes(x = body_norm, group = fitted, fill = fitted))+
geom_density(alpha = 0.4)
ggplot(my_data, aes(x = body_norm, group = Mating, fill = Mating))+
geom_density(alpha = 0.4)
rm(list = ls())
# --- Libraries ---
library(data.table)
library(caret)
library(ggplot2)
library(rpart.plot)
library(randomForest)
library(ipred)
source("case01/case01_01_read_data.R")
# -----------------------------------------------------------------------
# -------------   looking for a model that fits better the data   -------
# even if a "perfect" model cannot be found, we can probably do much better
# than what we got before
# we will try to find a better model via decision trees (cart)
# the idea is to then turn the insights of the decision tree result
# into linear components to fit another generalized linear model
# -----------------------------------------------------------------------
rm(list = ls())
# --- Libraries ---
library(data.table)
library(caret)
library(ggplot2)
library(rpart.plot)
library(randomForest)
library(ipred)
source("case01/case01_01_read_data.R")
my_formula0 <- as.formula(paste0(current_response_var,
"~  antennae + body"))
my_formula0 <- as.formula(paste0(current_response_var,
"~  antennae + body"))
my_cart0 <- caret::train(my_formula0, my_data, method = "rpart",model=TRUE,
trControl = trainControl(
method = "cv", number = 10, verboseIter = TRUE),
tuneGrid=expand.grid(cp=0.01)
)
my_cart0 <- caret::train(my_formula0, my_data, method = "rpart",model=TRUE,
trControl = trainControl(
method = "cv", number = 10, verboseIter = TRUE),
tuneGrid=expand.grid(cp=0.01)
)
# - Plot the tree
rpart.plot(my_cart0$finalModel)
# - CP table
my_cart0$finalModel$cptable
# - confusion matrix with fitted values
confusionMatrix(my_cart0_pred,my_data[[current_response_var]], positive = "M")
# - CP table
my_cart0$finalModel$cptable
# - fitted values on the same dataset
my_cart0_pred <-predict(my_cart0,my_data)
# - confusion matrix with fitted values
confusionMatrix(my_cart0_pred,my_data[[current_response_var]], positive = "M")
antennae_new <- as.factor((my_data[["antennae"]]<0.82)*1 +
(my_data[["antennae"]]>=0.82 & my_data[["antennae"]]<1.1 )*2 +
(my_data[["antennae"]]>=1.1 & my_data[["antennae"]]<1.3 )*3 +
(my_data[["antennae"]]>=1.3 & my_data[["antennae"]]<1.4 )*4 +
(my_data[["antennae"]]>=1.4)*5)
my_data[["antennae_new"]] <- antennae_new
my_formula2 <- as.formula(paste0(current_response_var,
"~  antennae_new + body "))
my_model2 <- glm(my_formula2, data = my_data, family = binomial())
my_model2_summary <- summary(my_model2)
my_model2_summary$coefficients
my_formula2 <- as.formula(paste0(current_response_var,
"~  antennae_new + body "))
my_model2 <- glm(my_formula2, data = my_data, family = binomial())
my_model2_summary <- summary(my_model2)
my_model2_summary$coefficients # - p-values in the last column
my_fitted2_numerical <- 1/(1+exp(-predict(my_model2)))
plot(my_fitted2_numerical, my_data[[current_response_var]])
threshold <- 0.5
my_fitted2 <- as.factor(ifelse(my_fitted2_numerical>threshold, "M", "U"))
my_fitted2 <- relevel(my_fitted2, "U")
table(my_fitted2, my_data[[current_response_var]])
threshold <- 0.3
my_fitted2 <- as.factor(ifelse(my_fitted2_numerical>threshold, "M", "U"))
my_fitted2 <- relevel(my_fitted2, "U")
table(my_fitted2, my_data[[current_response_var]])
my_data0 <- copy(my_data)
my_data0[["fitted"]] <- my_fitted0
# -----------------------------------------------------------------------
# -------------   looking for a model that fits better the data   -------
# even if a "perfect" model cannot be found, we can probably do much better
# than what we got before
# we will try to find a better model via decision trees (cart)
# the idea is to then turn the insights of the decision tree result
# into linear components to fit another generalized linear model
# -----------------------------------------------------------------------
rm(list = ls())
# --- Libraries ---
library(data.table)
library(caret)
library(ggplot2)
library(rpart.plot)
library(randomForest)
library(ipred)
# --- Read data sets ---
source("case01/case01_01_read_data.R")
# --- Select one current dataset for work
# -------------------------- model training  -----------------------------
# - formula
my_formula0 <- as.formula(paste0(current_response_var,
"~  antennae + body"))
# - model training: See documentation if tuning parameters are to be changed.
# - these following settings were chosen based on external assessment that I did not
# - bring in this code
my_cart0 <- caret::train(my_formula0, my_data, method = "rpart",model=TRUE,
trControl = trainControl(
method = "cv", number = 10, verboseIter = TRUE),
tuneGrid=expand.grid(cp=0.01)
)
# - Plot the tree
rpart.plot(my_cart0$finalModel)
# - CP table
my_cart0$finalModel$cptable
# - fitted values on the same dataset
my_cart0_pred <-predict(my_cart0,my_data)
# - confusion matrix with fitted values
confusionMatrix(my_cart0_pred,my_data[[current_response_var]], positive = "M")
# --- transformations after first check
antennae_new <- as.factor((my_data[["antennae"]]<0.82)*1 +
(my_data[["antennae"]]>=0.82 & my_data[["antennae"]]<1.1 )*2 +
(my_data[["antennae"]]>=1.1 & my_data[["antennae"]]<1.3 )*3 +
(my_data[["antennae"]]>=1.3 & my_data[["antennae"]]<1.4 )*4 +
(my_data[["antennae"]]>=1.4)*5)
my_data[["antennae_new"]] <- antennae_new
my_formula2 <- as.formula(paste0(current_response_var,
"~  antennae_new + body "))
my_model2 <- glm(my_formula2, data = my_data, family = binomial())
my_model2_summary <- summary(my_model2)
my_model2_summary$coefficients # - p-values in the last column
my_fitted2_numerical <- 1/(1+exp(-predict(my_model2)))
plot(my_fitted2_numerical, my_data[[current_response_var]])
threshold <- 0.3
my_fitted2 <- as.factor(ifelse(my_fitted2_numerical>threshold, "M", "U"))
my_fitted2 <- relevel(my_fitted2, "U")
table(my_fitted2, my_data[[current_response_var]])
# - confusion matrix with fitted values
confusionMatrix(my_fitted2,my_data[[current_response_var]], positive = "M")
threshold <- 0.4
my_fitted2 <- as.factor(ifelse(my_fitted2_numerical>threshold, "M", "U"))
my_fitted2 <- relevel(my_fitted2, "U")
table(my_fitted2, my_data[[current_response_var]])
my_data0 <- copy(my_data)
my_data0[["fitted"]] <- my_fitted0
my_data0[["fitted"]] <- my_fitted2
# - confusion matrix with fitted values
confusionMatrix(my_fitted2,my_data[[current_response_var]], positive = "M")
threshold <- 0.35
my_fitted2 <- as.factor(ifelse(my_fitted2_numerical>threshold, "M", "U"))
my_fitted2 <- relevel(my_fitted2, "U")
table(my_fitted2, my_data[[current_response_var]])
my_data0 <- copy(my_data)
my_data0[["fitted"]] <- my_fitted2
# - confusion matrix with fitted values
confusionMatrix(my_fitted2,my_data[[current_response_var]], positive = "M")
threshold <- 0.38
my_fitted2 <- as.factor(ifelse(my_fitted2_numerical>threshold, "M", "U"))
my_fitted2 <- relevel(my_fitted2, "U")
table(my_fitted2, my_data[[current_response_var]])
my_data0 <- copy(my_data)
my_data0[["fitted"]] <- my_fitted2
# - confusion matrix with fitted values
confusionMatrix(my_fitted2,my_data[[current_response_var]], positive = "M")
# - confusion matrix with fitted values
confusionMatrix(my_cart0_pred,my_data[[current_response_var]], positive = "M")
my_formula2 <- as.formula(paste0(current_response_var,
"~  antennae_new + body "))
my_model2 <- glm(my_formula2, data = my_data, family = binomial())
my_model2_summary <- summary(my_model2)
my_model2_summary$coefficients # - p-values in the last column
my_fitted2_numerical <- 1/(1+exp(-predict(my_model2)))
plot(my_fitted2_numerical, my_data[[current_response_var]])
threshold <- 0.38
my_fitted2 <- as.factor(ifelse(my_fitted2_numerical>threshold, "M", "U"))
my_fitted2 <- relevel(my_fitted2, "U")
table(my_fitted2, my_data[[current_response_var]])
my_data0 <- copy(my_data)
my_data0[["fitted"]] <- my_fitted2
# - confusion matrix with fitted values
confusionMatrix(my_fitted2,my_data[[current_response_var]], positive = "M")
threshold <- 0.385
my_fitted2 <- as.factor(ifelse(my_fitted2_numerical>threshold, "M", "U"))
my_fitted2 <- relevel(my_fitted2, "U")
table(my_fitted2, my_data[[current_response_var]])
my_data0 <- copy(my_data)
my_data0[["fitted"]] <- my_fitted2
# - confusion matrix with fitted values
confusionMatrix(my_fitted2,my_data[[current_response_var]], positive = "M")
threshold <- 0.39
my_fitted2 <- as.factor(ifelse(my_fitted2_numerical>threshold, "M", "U"))
my_fitted2 <- relevel(my_fitted2, "U")
table(my_fitted2, my_data[[current_response_var]])
my_data0 <- copy(my_data)
my_data0[["fitted"]] <- my_fitted2
# - confusion matrix with fitted values
confusionMatrix(my_fitted2,my_data[[current_response_var]], positive = "M")
# -----------------------------------------------------------------------
# ------------- significance tests based on a generalized linear model  -
# -----------------------------------------------------------------------
rm(list = ls())
# --- Libraries ---
library(data.table)
library(caret)
library(ggplot2)
# --- Read data sets ---
source("case01/case01_01_read_data.R")
# -------------------------- model training -----------------------------
# --- formula of the model
my_formula <- as.formula(paste0(current_response_var,
"~ body_norm + antennae_norm"))
# --- linear model with binomial distribution for the response variable
my_model0 <- glm(my_formula, data = my_data, family = binomial())
my_model0_summary <- summary(my_model0)
my_model0_summary$coefficients # p-values are in the last column
# --- check fit of the model
my_fitted0_numerical <- 1/(1+exp(-predict(my_model0)))
plot(my_fitted0_numerical, my_data[[current_response_var]])
threshold <- 0.38 # --- set a different threshold to divide the predicted probabilities
my_fitted0 <- as.factor(ifelse((1/(1+exp(-predict(my_model0))))>threshold, "M_fitted", "U_fitted"))
my_fitted0 <- relevel(my_fitted0, "U_fitted")
table(my_fitted0, my_data[[current_response_var]])
my_data0 <- copy(my_data)
my_data0[["fitted"]] <- my_fitted0
# - confusion matrix with fitted values
confusionMatrix(my_fitted0,my_data[[current_response_var]], positive = "M")
my_fitted0
my_fitted0 <- as.factor(ifelse((1/(1+exp(-predict(my_model0))))>threshold, "M", "U"))
my_fitted0 <- relevel(my_fitted0, "U")
table(my_fitted0, my_data[[current_response_var]])
my_data0 <- copy(my_data)
my_data0[["fitted"]] <- my_fitted0
# - confusion matrix with fitted values
confusionMatrix(my_fitted0,my_data[[current_response_var]], positive = "M")
ggplot(my_data0, aes(x = body_norm, group = fitted, fill = fitted))+
geom_density(alpha = 0.4)
ggplot(my_data, aes(x = body_norm, group = Mating, fill = Mating))+
geom_density(alpha = 0.4)
ggplot(my_data0, aes(x = body_norm, group = fitted, fill = fitted))+
geom_density(alpha = 0.4)
# -----------------------------------------------------------------------
# -------------   looking for a model that fits better the data   -------
# even if a "perfect" model cannot be found, we can probably do much better
# than what we got before
# we will try to find a better model via decision trees (cart)
# the idea is to then turn the insights of the decision tree result
# into linear components to fit another generalized linear model
# -----------------------------------------------------------------------
rm(list = ls())
# --- Libraries ---
library(data.table)
library(caret)
library(ggplot2)
library(rpart.plot)
library(randomForest)
library(ipred)
# --- Read data sets ---
source("case01/case01_01_read_data.R")
# --- Select one current dataset for work
# -------------------------- model training  -----------------------------
# - formula
my_formula0 <- as.formula(paste0(current_response_var,
"~  antennae + body"))
# - model training: See documentation if tuning parameters are to be changed.
# - these following settings were chosen based on external assessment that I did not
# - bring in this code
my_cart0 <- caret::train(my_formula0, my_data, method = "rpart",model=TRUE,
trControl = trainControl(
method = "cv", number = 10, verboseIter = TRUE),
tuneGrid=expand.grid(cp=0.01)
)
# - Plot the tree
rpart.plot(my_cart0$finalModel)
# - CP table
my_cart0$finalModel$cptable
# - fitted values on the same dataset
my_cart0_pred <-predict(my_cart0,my_data)
# - confusion matrix with fitted values
confusionMatrix(my_cart0_pred,my_data[[current_response_var]], positive = "M")
# --- transformations after first check
antennae_new <- as.factor((my_data[["antennae"]]<0.82)*1 +
(my_data[["antennae"]]>=0.82 & my_data[["antennae"]]<1.1 )*2 +
(my_data[["antennae"]]>=1.1 & my_data[["antennae"]]<1.3 )*3 +
(my_data[["antennae"]]>=1.3 & my_data[["antennae"]]<1.4 )*4 +
(my_data[["antennae"]]>=1.4)*5)
my_data[["antennae_new"]] <- antennae_new
# -------------------------- re training of linear model ---------------
# --- glm
my_formula2 <- as.formula(paste0(current_response_var,
"~  antennae_new + body "))
my_model2 <- glm(my_formula2, data = my_data, family = binomial())
my_model2_summary <- summary(my_model2)
my_model2_summary$coefficients # - p-values in the last column
my_fitted2_numerical <- 1/(1+exp(-predict(my_model2)))
plot(my_fitted2_numerical, my_data[[current_response_var]])
threshold <- 0.39
my_fitted2 <- as.factor(ifelse(my_fitted2_numerical>threshold, "M", "U"))
my_fitted2 <- relevel(my_fitted2, "U")
table(my_fitted2, my_data[[current_response_var]])
my_data0 <- copy(my_data)
my_data0[["fitted"]] <- my_fitted2
# - confusion matrix with fitted values
confusionMatrix(my_fitted2,my_data[[current_response_var]], positive = "M")
# -----------------------------------------------------------------------
# -------------    reproducibility of p-value     ----------------------
# -----------------------------------------------------------------------
rm(list = ls())
library(data.table)
library(caret)
library(ggplot2)
library(rpart.plot)
library(randomForest)
library(ipred)
source("case01/case01_01_read_data.R")
antennae_new <- as.factor((my_data[["antennae"]]<0.82)*1 +
(my_data[["antennae"]]>=0.82 & my_data[["antennae"]]<1.1 )*2 +
(my_data[["antennae"]]>=1.1 & my_data[["antennae"]]<1.3 )*3 +
(my_data[["antennae"]]>=1.3 & my_data[["antennae"]]<1.4 )*4 +
(my_data[["antennae"]]>=1.4)*5)
my_data[["antennae_new"]] <- antennae_new
x_new <- as.factor((my_data[["antennae_new"]]==2 & my_data[["treatment"]] =="low") +
(my_data[["antennae_new"]]==5 & my_data[["treatment"]] =="low"))
my_data[["x_new"]] <- x_new
my_formula3 <- as.formula(paste0(current_response_var,
"~  x_new "))#
my_model3 <- glm(my_formula3, data = my_data, family = binomial())
my_model3_summary <- summary(my_model3)
my_model3_summary$coefficients[2,4]
my_model3_summary
my_formula3 <- as.formula(paste0(current_response_var,
"~  antennae_new "))#
my_model3 <- glm(my_formula3, data = my_data, family = binomial())
my_model3_summary <- summary(my_model3)
my_model3_summary$coefficients[2,4]
my_model3_summary
x_new
my_formula3 <- as.formula(paste0(current_response_var,
"~  antennae_new "))#
my_model3 <- glm(my_formula3, data = my_data, family = binomial())
my_model3_summary <- summary(my_model3)
my_model3_summary$coefficients[2,4]
pvalues <- NULL
for(iteration in seq(1,100)) {
sample_iteration <- sample(1:nrow(my_data), nrow(my_data), replace = TRUE)
my_data_iteration <- my_data[sample_iteration]
my_formula3 <- as.formula(paste0(current_response_var,
"~  x_new "))#
my_model3 <- glm(my_formula3, data = my_data_iteration, family = binomial())
my_model3_summary <- summary(my_model3)
pvalues <- c(pvalues, my_model3_summary$coefficients[2,4])
}
pvalues
round(pvalues,3)
my_model3_summary
my_formula3 <- as.formula(paste0(current_response_var,
"~  antennae_new "))#
my_model3 <- glm(my_formula3, data = my_data, family = binomial())
my_model3_summary <- summary(my_model3)
my_model3_summary
rm(list = ls())
library(data.table)
library(caret)
library(ggplot2)
library(rpart.plot)
library(randomForest)
library(ipred)
source("case01/case01_01_read_data.R")
antennae_new <- as.factor((my_data[["antennae"]]<0.82)*1 +
(my_data[["antennae"]]>=0.82 & my_data[["antennae"]]<1.1 )*2 +
(my_data[["antennae"]]>=1.1 & my_data[["antennae"]]<1.3 )*3 +
(my_data[["antennae"]]>=1.3 & my_data[["antennae"]]<1.4 )*4 +
(my_data[["antennae"]]>=1.4)*5)
my_data[["antennae_new"]] <- antennae_new
x_new <- as.factor((my_data[["antennae_new"]]==1 ) +
(my_data[["antennae_new"]]==3 ))
my_data[["x_new"]] <- x_new
my_formula3 <- as.formula(paste0(current_response_var,
"~  antennae_new "))#
my_formula3 <- as.formula(paste0(current_response_var,
"~  x_new "))#
my_model3 <- glm(my_formula3, data = my_data, family = binomial())
my_model3_summary <- summary(my_model3)
my_model3_summary$coefficients[2,4]
my_model3_summary
x_new <- as.factor((my_data[["antennae_new"]]==1 ) +
(my_data[["antennae_new"]]==3 ))
my_data[["x_new"]] <- x_new
my_formula3 <- as.formula(paste0(current_response_var,
"~  x_new "))#
my_model3 <- glm(my_formula3, data = my_data, family = binomial())
my_model3_summary <- summary(my_model3)
my_model3_summary$coefficients[2,4]
my_model3_summary
pvalues <- NULL
for(iteration in seq(1,100)) {
sample_iteration <- sample(1:nrow(my_data), nrow(my_data), replace = TRUE)
my_data_iteration <- my_data[sample_iteration]
my_formula3 <- as.formula(paste0(current_response_var,
"~  x_new "))#
my_model3 <- glm(my_formula3, data = my_data_iteration, family = binomial())
my_model3_summary <- summary(my_model3)
pvalues <- c(pvalues, my_model3_summary$coefficients[2,4])
}
hist(pvalues)
ggplot()
ggplot() +
geom_density(pvalues)
pvalues
data.table(pvalues)
ggplot(data.table(pvalues), aes(x = pvalues)) +
geom_density()
ggplot(data.table(pvalues), aes(x = pvalues)) +
geom_density(fill = "blue")
ggplot(data.table(pvalues), aes(x = pvalues)) +
geom_density(fill = "red")
ggplot(data.table(pvalues), aes(x = pvalues)) +
geom_density(fill = "red", alpha = 0.4)
